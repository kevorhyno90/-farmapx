
// This file provides functionality for the comprehensive Reports section.

async function fetchAllData(db) {
    const allCollections = [
        'clients', 'livestock', 'health', 'vaccination', 'breeding', 'feed', 'lab_results',
        'fields', 'crops', 'soil_analysis', 'irrigation', 'scouting', 'pest_control',
        'harvest_log', 'yield', 'production', 'finance', 'budget', 'invoicing',
        'supplies', 'harvested_goods', 'equipment'
    ];

    const allData = {};

    for (const collectionName of allCollections) {
        try {
            const snapshot = await db.collection(collectionName).get();
            allData[collectionName] = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        } catch (error) {
            console.error(`Error fetching ${collectionName}:`, error);
            allData[collectionName] = []; // Return an empty array on error
        }
    }

    return allData;
}

function generateReportHTML(allData) {
    let html = `<h2>Full Data Report</h2>`;
    html += `<button onclick="downloadFullReportDoc()">Download Full Report (DOC)</button>`;

    for (const [collectionName, records] of Object.entries(allData)) {
        const title = collectionName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        html += `<div class="report-section-header"><h3>${title}</h3><button onclick="downloadIndividualReportDoc('${collectionName}')">Download Report (DOC)</button></div>`;

        if (records.length === 0) {
            html += '<p>No records found.</p>';
            continue;
        }

        html += '<table><thead><tr>';
        const headers = Object.keys(records[0]).filter(key => typeof records[0][key] !== 'object');
        headers.forEach(h => html += `<th>${h.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</th>`);
        html += '</tr></thead><tbody>';

        records.forEach(record => {
            html += '<tr>';
            headers.forEach(h => {
                const value = record[h] !== null && record[h] !== undefined ? record[h] : '';
                html += `<td>${value}</td>`;
            });
            html += '</tr>';
        });

        html += '</tbody></table>';
    }
    html += `<div class="report-attribution">Report generated by Dr. Devin</div>`;

    return html;
}

function generateDocHTML(data, singleCollectionName = null) {
    let html = '';
    const dataToProcess = singleCollectionName ? { [singleCollectionName]: data[singleCollectionName] } : data;

    for (const [collectionName, records] of Object.entries(dataToProcess)) {
        if (records.length === 0) continue;

        const title = collectionName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        html += `<h2>${title}</h2>`;

        if (records.length > 0) {
            html += '<table border="1" style="border-collapse: collapse; width: 100%;">';
            
            const flattenedRecords = records.map(record => {
                const flat = {};
                for (const [key, value] of Object.entries(record)) {
                    if (typeof value === 'object' && value !== null) {
                        for (const [subKey, subValue] of Object.entries(value)) {
                            flat[`${key}_${subKey}`] = subValue;
                        }
                    } else {
                        flat[key] = value;
                    }
                }
                return flat;
            });

            const headers = [...new Set(flattenedRecords.flatMap(Object.keys))];
            
            html += '<thead><tr>';
            headers.forEach(h => html += `<th>${h.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</th>`);
            html += '</tr></thead><tbody>';

            flattenedRecords.forEach(record => {
                html += '<tr>';
                headers.forEach(h => {
                    const value = record[h] !== null && record[h] !== undefined ? record[h] : '';
                    html += `<td>${value}</td>`;
                });
                html += '</tr>';
            });
            html += '</tbody></table><br>';
        }
    }
    html += `<br><p>Made by Dr. Devin</p>`;
    return html;
}

function downloadDoc(filename, htmlContent) {
    const header = "<html xmlns:o='urn:schemas-microsoft-com:office:office' "+
        "xmlns:w='urn:schemas-microsoft-com:office:word' "+
        "xmlns='http://www.w3.org/TR/REC-html40'>"+
        "<head><meta charset='utf-8'><title>Export HTML to Word</title></head><body>";
    const footer = "</body></html>";
    const sourceHTML = header + htmlContent + footer;

    const blob = new Blob([sourceHTML], { type: 'application/vnd.ms-word' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

window.downloadFullReportDoc = async function() {
    const db = firebase.firestore();
    const allData = await fetchAllData(db);
    const docContent = generateDocHTML(allData);
    downloadDoc('farmark_full_report.doc', docContent);
}

window.downloadIndividualReportDoc = async function(collectionName) {
    const db = firebase.firestore();
    const allData = await fetchAllData(db);
    const docContent = generateDocHTML(allData, collectionName);
    downloadDoc(`farmark_${collectionName}_report.doc`, docContent);
}

window.renderReports = async function(db) {
    let html = `<h2>Generating Report...</h2>`;
    let callback = null;

    try {
        const allData = await fetchAllData(db);
        html = generateReportHTML(allData);
    } catch (error) {
        console.error("Error generating full report:", error);
        html = '<p>Could not generate the full report. Please try again later.</p>';
    }

    return { html, callback };
}
